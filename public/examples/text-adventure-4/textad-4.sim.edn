(ns protean.textad4
  (:require [protean.api.transformation.sim :refer :all]
            [clojure.string :refer [join]]
            [alandipert.enduro :as e]))

(defn fmt [list] (join " " (map #(symbol (name %)) list)))

(def world (e/file-atom
{
  'office-cubicle '((you are in your office cubicle -)
    (west exit walkway))
  'walkway '((you are in the walkway at the side of the office -)
    (east exit office-cubicle)
    (north exit reception)
    (south exit bobs-office))
  'reception '((you are in reception - it is drab -)
    (west exit miltons-cubicle)
    (south exit walkway))
  'bobs-office '((you in the Bobs office -)
    (north exit walkway))
  'miltons-cubicle '((you are in miltons cubicle -)
    (east exit reception))
} "textad-4-world.sav"))

(def entities (e/file-atom #{'Lumbergh 'Milton} "textad-4-entities.sav"))

(def location (e/file-atom
{
  'Milton 'miltons-cubicle
  'Lumbergh 'office-cubicle
} "textad-4-location.sav"))

(defn register [name]
  (let [sn (symbol name)]
    (if (contains? @entities name)
      false
      (do
        (e/swap! entities conj sn)
        (e/swap! location assoc sn 'office-cubicle)
        true))))

(defn describe-location [loc world] (first (loc world)))

(defn describe-path [path]
  `(there is an ~(second path) going ~(first path) from here -))

(defn describe-paths [location world]
  (apply concat (map describe-path (rest (get world location)))))

(def items (atom '(photocopier red-stapler)))

(def item-locations (e/file-atom
{
  'photocopier 'walkway
  'red-stapler 'miltons-cubicle
} "textad-4-item-locations.sav"))

(defn is-at? [obj loc obj-loc] (= (obj obj-loc) loc))

(defn describe-floor [loc objs obj-loc]
  (apply concat (map (fn [x] `(you see a ~x on the floor -))
    (filter (fn [x] (is-at? x loc obj-loc)) objs))))

(defn describe-entities [name loc locs]
  (apply concat (map (fn [x] `(you see ~x -))
    (remove #(= % name) (filter (comp #{loc} locs) (keys locs))))))

(defn look [name]
  (when (contains? @entities name)
    (let [loc (name @location)]
      (fmt (concat (describe-location loc @world)
                   (describe-paths loc @world)
                   (describe-entities name loc @location)
                   (describe-floor loc @items @item-locations))))))

(defn pickup [name item]
  (cond (is-at? item (name @location) @item-locations)
  (do
    (e/swap! item-locations assoc item (symbol name))
    (fmt `(you are now carrying the ~item)))
    :else (fmt '(you cannot get that.))))

(defn inventory-raw [name]
  (when (contains? @entities name)
    (filter (fn [x] (is-at? x (symbol name) @item-locations)) @items)))

(defn inventory [name] (fmt (inventory-raw name)))

(defn have? [item] (some #{item} (inventory)))

(defn go [name direction]
  (let [loc (first (filter #(= direction (first %)) (rest ((name @location) @world))))]
    (cond loc (do (e/swap! location assoc name (nth loc 2)) (look name))
          :else '(you cannot go that way -))))

(defn slap [name object]
  (when (and (contains? @entities name) (contains? @entities object))
    (cond (= (name @location) (object @location))
      (cond (= object 'Lumbergh) (fmt '(Lumbergh says yahhh, mmmm we are gonna need to go ahead and talk about that -))
            (= object 'Milton) (fmt '(Milton mumbles about burning the building down -))
            :else (fmt '(oooh, that was some good slapping -)))
      :else (fmt '(you cannot slap like that -)))))

(defn mug [name object]
  (when (and (contains? @entities name) (contains? @entities object))
    (cond
      (= (name @location) (object @location))
      (if-let [items (seq (inventory-raw object))]
        (do
          (doseq [item items] (e/swap! item-locations assoc item (symbol name)))
          (fmt '(you got items)))
        (fmt '(you got nothing you mug.. who is the mug now?)))
    :else (fmt '(you cannot mug like that -)))))

(defn s-qp [request id] (symbol (query-param request id)))

(defn handle
  [request result success-status error-status]
  (cond
    (and result (= success-status 204)) (respond request success-status)
    result                              (respond request success-status result)
    :else                               (respond request error-status)))

{
  "textad-4" {
    "register" {:put #(handle % (register (s-qp % "name")) 204 409)}
    "look" {:get #(handle % (look (s-qp % "name")) 200 404)}
    "go" {:put #(handle % (go (s-qp % "name") (s-qp % "direction")) 200 404)}
    "inventory" {:get #(handle % (inventory (s-qp % "name")) 200 404)}
    "pickup" {:put #(handle % (pickup (s-qp % "name") (s-qp % "item")) 200 404)}
    "slap" {:put #(handle % (slap (s-qp % "name") (s-qp % "item")) 200 404)}
    "mug" {:put #(handle % (mug (s-qp % "name") (s-qp % "item")) 200 404)}
  }
}
