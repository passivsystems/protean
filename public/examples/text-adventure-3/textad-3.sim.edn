(ns protean.textad3
  (:require [protean.api.transformation.sim :refer :all]
            [clojure.string :refer [join]]
            [alandipert.enduro :as e]
            [simlib :as sl]))

(defn fmt [list] (join " " (map #(symbol (name %)) list)))

(def world (e/file-atom
{
  'office-cubicle '((you are in your office cubicle -)
    (west exit walkway))
  'walkway '((you are in the walkway at the side of the office -)
    (east exit office-cubicle)
    (north exit reception)
    (south exit bobs-office))
  'reception '((you are in reception - it is drab -)
    (west exit miltons-cubicle)
    (south exit walkway))
  'bobs-office '((you in the Bobs office -)
    (north exit walkway))
  'miltons-cubicle '((you are in miltons cubicle -)
    (east exit reception))
} "textad-3-world.sav"))

(def entities (e/file-atom #{'Milton} "textad-3-entities.sav"))

(def location (e/file-atom
{
  'Milton 'miltons-cubicle
  'Lumbergh 'office-cubicle
} "textad-3-location.sav"))

(defn register [name]
  (let [sn (symbol name)]
    (if (contains? @entities name)
      false
      (do
        (e/swap! entities conj sn)
        (e/swap! location assoc sn 'office-cubicle)
        true))))

(defn describe-location [loc world] (first (loc world)))

(defn describe-path [path]
  `(there is an ~(second path) going ~(first path) from here -))

(defn describe-paths [location world]
  (apply concat (map describe-path (rest (get world location)))))

(def items (atom '(photocopier red-stapler)))

(def item-locations (e/file-atom
{
  'photocopier 'walkway
  'red-stapler 'miltons-cubicle
} "textad-3-item-locations.sav"))

(defn is-at? [obj loc obj-loc] (= (obj obj-loc) loc))

(defn describe-floor [loc objs obj-loc]
  (apply concat (map (fn [x] `(you see a ~x on the floor -))
    (filter (fn [x] (is-at? x loc obj-loc)) objs))))

(defn describe-entities [name loc locs]
  (apply concat (map (fn [x] `(you see ~x -))
    (remove #(= % name) (filter (comp #{loc} locs) (keys locs))))))

(defn look [name]
  (let [loc (name @location)]
    (fmt (concat (describe-location loc @world)
                 (describe-paths loc @world)
                 (describe-entities name loc @location)
                 (describe-floor loc @items @item-locations)))))

(defn pickup [name item]
  (cond (is-at? item (name @location) @item-locations)
  (do
    (e/swap! item-locations assoc item (symbol name))
    (fmt `(you are now carrying the ~item)))
    :else (fmt '(you cannot get that.))))

(defn inventory [name]
  (fmt (filter (fn [x] (is-at? x (symbol name) @item-locations)) @items)))

(defn have? [item] (some #{item} (inventory)))

(defn go [name direction]
  (let [loc (first (filter #(= direction (first %)) (rest ((name @location) @world))))]
    (cond loc (do (e/swap! location assoc name (nth loc 2)) (look name))
          :else '(you cannot go that way -))))

(defn register-rest []
  (let [nm (symbol (query-param "name"))] (if (register nm) {:status 204} {:status 409})))

(defn look-rest []
  (let [nm (symbol (query-param "name"))] (if (contains? @entities nm) (sl/jsn 200 (look nm)) {:status 404})))

(defn go-rest [] (sl/jsn 200 (go (symbol (query-param "name")) (symbol (query-param "direction")))))

(defn pickup-rest [] (sl/jsn 200 (pickup (symbol (query-param "name")) (symbol (query-param "item")))))

(defn inventory-rest []
  (let [nm (symbol (get-in *request* [:query-params "name"]))]
  (if (contains? @entities nm) (sl/jsn 200 (inventory nm)) {:status 404})))

{
  "textad-3" {
    "register" {:put [#(register-rest)]}
    "look" {:get [#(look-rest)]}
    "go" {:put [#(go-rest)]}
    "inventory" {:get [#(inventory-rest)]}
    "pickup" {:put [#(pickup-rest)]}
  }
}
