(ns protean.textad1
  (:require [protean.api.transformation.sim :refer :all]
            [clojure.string :refer [join]]
            [alandipert.enduro :as e]))

(dependencies '[[protean-simlib "0.12.0"]])
(require '[protean.simlib :as sl])

(defn fmt [list] (join " " (map #(symbol (name %)) list)))

(def world (e/file-atom
{
  'office-cubicle '((you are in your office cubicle -)
    (west exit walkway))
  'walkway '((you are in the walkway at the side of the office -)
    (east exit office-cubicle)
    (north exit reception)
    (south exit bobs-office))
  'reception '((you are in reception - it is drab -)
    (west exit miltons-cubicle)
    (south exit walkway))
  'bobs-office '((you in the Bobs office -)
    (north exit walkway))
  'miltons-cubicle '((you are in miltons office -)
    (east exit reception))
} "textad-1-world.sav"))

(def location (e/file-atom 'office-cubicle "textad-1-location.sav"))

(defn describe-location [location world] (first (location world)))

(defn describe-path [path]
  `(there is an ~(second path) going ~(first path) from here -))

(defn describe-paths [location world]
  (apply concat (map describe-path (rest (get world location)))))

(defn look []
  (fmt (concat (describe-location @location @world)
               (describe-paths @location @world))))

(defn go [direction]
  (let [loc (first (filter #(= direction (first %)) (rest (@location @world))))]
    (cond loc (do (e/reset! location (nth loc 2)) (look))
          :else '(you cannot go that way -))))

(defn go-rest [] (let [dir (symbol (query-param "direction"))] (sl/jsn 200 (go dir))))

{
  "textad-1" {
    "look" {:get [#(sl/jsn 200 (look))]}
    "go" {:put [#(go-rest)]}
  }
}
