(ns protean.petstore.demo
  (:require [protean.api.transformation.sim :refer :all]
            [protean.config :refer :all]))

;; Here we demonstrate much of what is possible with Protean, often resulting in errors !

(def counter (atom 0))

{
  "petstore-demo" {

    "api/pet" {
      :put [
        #(-> {:status 200 :headers {"Content-Type" "application/json"} :body (slurp "test-data/content/doc/responses/simple/200-ref.json")})
      ]
      :post [
        #(if-valid {:status 201 :headers {"Location" "/pet/yyyy"}})
      ]
    }

    "api/pet/${petId}" {
      :get [
        #(do (log *request* (str (env :user-home) "/tmp/protean-requests.txt"))
             (Thread/sleep 2000)
             (success))
      ]

      :delete [#(error)] ; select a random codex error response

      :patch [#(or (prob 0.5 (error)) (success))] ; 50% chance of a random codex error response

      :post [
        ;; synchronous response
        #(if-valid (respond 200 :body-url "test-data/content/doc/responses/simple/200-ref.json"))

        ;; synchronously forward request to another API, and log response
        ;;   sends to an endpoint in another protean sim extenstion (the echo endpoint)
        #(when (valid-inputs?)
          (make-request :put (str "http://localhost:" (sim-port) "/protean-utils/echo") {
            :content-type (header "content-type") ; Note, headers in request are in lower-case (ring)
            :form-params (into {} (for [[k v] (:form-params *request*)] [(keyword k) v]))
            :log (str (env :user-home) "/tmp/protean-responses.txt")}))

        ;; asynchronously forward request to another API, and log response
        ;;   sends to an endpoint in another protean sim extenstion (the echo endpoint)
        ;; after delay (in ms)
        #(in 3000
          (make-request :put (str "http://localhost:" (sim-port) "/protean-utils/echo") {
            :content-type (header "content-type") ; Note, headers in request are in lower-case (ring)
            :form-params (into {} (for [[k v] (:form-params *request*)] [(keyword k) v]))
            :log (str (env :user-home) "/tmp/protean-responses.txt")}))
      ]
    }

    "api/uploadImage" {
      :post [
        ; alternative to error with probability - every nth access gives error - requires server state
        #(if (= 0 (mod (swap! counter inc) 3)) (error))
      ]
    }
  }
}
