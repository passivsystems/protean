; This codex demonstrates Protean's default server behaviour without creating a
; custom sim.
;
; Generate the site docs then run the server to interact with this codex.
; To run from source substitue the protean command for lein return.
; protean doc -r public/examples/petstore-default/petstore.cod.edn --host localhost --port 3000
; protean sim -d public/examples/petstore-default/
;
; A codex is an API specification for RESTful resources. Each indiviual
; resource is comprised from an API name, the resource path and HTTP method.
; Specifications can be made individually, shared with all resources with the
; same path or global to all. This means specifications can inhertied,
; overridden or removed (by seting the value to false).
;
; Path definitions such as :includes, :body-examples and :body-schema can be
; relative or absolute paths. For relative paths the first attempt is to
; resolve them to the the codex directory. If this fails the current
; directory the Protean command was run in. Then finally PROTEAN_HOME.
;
; Content types are determined by :body-examples or :body-schema file extension
; but can also be manually set.
;
; :body-schema helps ensure received payload are validated and return types are
; accurate. This is important when simulating an API and helps when documenting
; an API.
{
  ; The API header/title displayed in the site docs.
  :title "Pet Store API Docs"

  ; :doc is a markdown descriptive field for site docs.
  ; See https://github.com/yogthos/markdown-clj for markdown support.
  :doc "Demonstrates what is possible with **Protean** without creating a custom sim"

  ; Merges in external defintions to be used throughout this codex.
  ; defaults.edn is in the PROTEAN_HOME directory and contains typical
  ; defintions for types :Date :DateTime :Token :Ip :String
  :includes [ "defaults.edn" ]

  ; Define global types using regular expression notation. Without including
  ; any files Protean supports :Int :Long :Double :Boolean :Uuid
  :types {
    :Status "(available|pending|sold)"
  }

  ; Variables are defined, documented and illustrated like so. They are
  ; referenced by wrapping the name with ${}. Note if an example is not
  ; provided a random value is generated from the :type regular expression.
  :vars {
    "petId" {:type :Uuid :doc "Universally unique identifier for a pet" :examples ["cc11d131-ed9e-4d8b-b038-fdc1ded07978"]}
    "name" {:type :String :doc "Name of the pet" :examples ["tiddles"]}
    "status" {:type :Status :doc "Status of the pet"}
    "bearerToken" {:type :Token :doc "Auth token" :examples ["08d2301e-ee81-4654-b448-0636f454612a"]}
  }

  ; Add authentication headers to everything.
  :req {:headers {"Authorization" "Bearer ${bearerToken}"}}

  ; API name is mandatory, can only be defined once per codex and can't be blank.
  "petstore" {
    ; Each resource must contain a method can inherits or override
    ; :doc :types :vars :req :rsp values to form a specification.
    "pets" {
      :get {
        :doc "Finds all pets, or pets filtered by status or name"
        ; Possible :req values are :headers :query-params :form-params
        ; :body-schema :doc and :body-examples
        :req {
          :headers {"Authorization" false} ; Remove authorization
          :query-params {
            "status" ["${status}" :optional] ; :optional or :required
            "name" ["${name}" :optional] ; append with :multiple for comma seperated lists
          }
        }

        ; :rsp requires a status code which can contain :headers :body-schema
        ; :body-examples & :doc
        :rsp {
          :200 {:body-examples ["data/rsp/pets.json"]}
          :400 {}
        }
      }

      :post {
        :doc "Add a new pet to the store"
        :req {:body-examples ["data/req/new-pet.json"]
              :body-schema "data/pet.schema.json"}
        :rsp {
          :201 {:headers {"Location" "/pet/${petId}"}}
          :400 {}
        }
      }
    }

    ; A resource can contain multiple path and matrix params. Please note
    ; matrix params must start with ; (see next resource)
    "pets/${petId}" {
      ; Lets inherit some responses so we don't repeat ourselves for just this resource
      :rsp {
        :200 {:body-examples ["data/rsp/pet.json"]
              :body-schema "data/pet.schema.json" }
        :404 {}
      }

      :get {:doc "Find a pet by ID"}

      :put {
        :doc "Updates a pet in the store with form data"
        :req {:form-params {"name" ["${name}" :required]
                            "status" ["${status}" :required]}}
        :rsp {:400 {}} ; Add an additional bad request response
      }

      :delete {
        :doc "Deletes a pet"
        :rsp {:200 false :204 {}} ; Change the inhertied response from :200 to :204
      }

      :patch {
        :doc "Partial updates to a pet"
        :rsp {:400 {}} ; Add an additional bad request response
      }
    }

    ; A matrix param example - note param name must start with ;
    "pets${;petsFilter}" {
      :get {
        :doc "Finds all pets, or pets filtered by status or name"
        ; :vars could have been defined globally for reuse
        :vars {
          ";petsFilter" {
            :type :MatrixParams
            ; To explicitly set examples - otherwise Protean will have a go
            ; :examples [";status=in;name=tiddles"]
            :struct {
              "status" ["${status}" :optional] ; :optional or :required
              "name" ["${name}" :optional]    ; append with :multiple for comma seperated lists
            }
          }
        }
        :rsp {
          :200 {:body-examples ["data/rsp/pets.json"]}
          :400 {}
        }
      }
    }
  }
}
