;; Sample API codex
;;
;; We call Protean Project/Service configurations codices
;; The sample codex illustrates most if not all of what is possible
;; with Protean

{
   "sample" {

    :includes [ "defaults.edn" ]

    "simple" {
      :get { :doc "A get on sample/simple - doc is optional" }
    }

    "header" {
      :get {
        :doc "A get with response header"
        :rsp {:headers {"Flibble" "Blurb"} :errors {:probability 0}}
      }
    }

    "multimethod" {
      :get { :doc "A get on sample/multimethod" }
      :put { :doc "A put on sample/multimethod" }
    }

    "test/*" {
      :get {
        :doc "Get with path parameter wildcard and configurable
              error and probability"
        :rsp {
          :body {"t1key" "t1val"}
          :errors {:status [504] :probability 50}
        }
      }
    }

    "xml" {
      :get {
        :doc "Get with XML content type/response"
        :rsp {
          :headers {"Content-Type" "text/xml"}
          :body [:parent [:child {:type "xml"}]]
        }
      }

      :put {
        :doc "Put an xml document, verify presence of elements"
        :req {
          :headers {"Content-Type" "text/xml"}
          :body [:a [:b [:c]]]
        }
      }
    }

    "test" {
      :get {
        :doc "Get with mandatory request headers/query str params"
        :req {
          :headers {"X-Auth" "XYZ"}
          :query-params {:required {"blurb" "flibble"}}
        }
        :rsp {:body {"t2key" "t2val"}}
      }

      :post {
        :doc "Post with mandatory request url encoded form"
        :req {:form-params {"k1" "v1"}}
        :rsp {:headers {"Location" "7"}}
      }

      :put {
        :doc "Put with mandatory body payload - defaults to JSON,
              demonstrates overriding response status code"
        :req {:body {"k1" "v1" "k2" "v2"}}
        :rsp {:status 200}
      }

      :delete {:doc "Delete sample"}
    }

    "test-json-boolean" {
      :put {
        :doc "Put with mandatory body payload - JSON boolean,
              optional constraint (boolean) for sim and doc purposes."
        :req {:body #{true false}}
      }
    }

    "test-json-string" {
      :put {
        :doc "Put with mandatory body payload - JSON string,
              optional constraint to val in a set for sim and doc purposes."
        :req {:body #{"kermit" "gonzo"}}
      }
    }

    "test-plain-text" {
      :get {
        :doc "Get a plain text response"
        :rsp {
          :headers {"Content-Type" "text/plain"}
          :body "Plain text response"
        }
      }

      :post {
        :doc "Post a plain text body - for sim restrict string to membership
              of a set"
        :req {
          :headers {"Content-Type" "text/plain"}
          :body #{"kermit" "gonzo"}
        }
      }
    }

    "slow" {
      :get {
        :doc "Get with slow response (secs) - useful for testing timeouts"
        :rsp {:time 2}
      }
    }

    :errors {:status [500 503] :probability 25}
  }
}
