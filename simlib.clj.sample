;; OUT OF THE BOX EXAMPLE SIM LIBRARY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns simlib
  (:require [protean.core.transformation.sim :refer :all]
            [protean.core.protocol.http :as h]
            [protean.core.transformation.coerce :refer [clj]]))


;; =============================================================================
;; Generally Useful Functions
;; =============================================================================

;; TODO: should find a more permanent home for this
(defn parse-id [s] (Integer. (re-find  #"\d+" s)))


;; =============================================================================
;; Sim Library Request Functions
;; =============================================================================

(defn qp [p] (query-param p))

(defn qp= [x p] (= (qp p) x))

(defn pp [p] (path-param p))


;; =============================================================================
;; Sim Library Response Functions
;; =============================================================================

(defn h-rsp [s hdr] {:status s :headers {h/loc hdr}})

(defn rsp [s] {:status s})

(defn jsn [status body] {:status status :headers {h/ctype h/jsn} :body body})

(defn txt [status body] {:status status :headers {h/ctype h/txt} :body body})


;; =============================================================================
;; Sim Library Payload Transport Functions
;; =============================================================================

(defn post [url body] (simple-request :post url body))

(defn put [url body] (simple-request :put url body))

(defn patch [url body] (simple-request :patch url body))


;; =============================================================================
;; Sim Library Scenario Modelling and Route Solution
;; =============================================================================

(defn solve [routes]
  (seq (remove nil? (map #(if ((first %)) (last %) nil) routes))))

(defn route-rsp [routes]
  (if-let [errs (solve routes)] ((rand-nth errs)) (success)))
